import { fileURLToPath, URL } from 'node:url';

import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';
import svgLoader from 'vite-svg-loader';
// import dts from "vite-plugin-dts";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    svgLoader(),
    /* dts({
      tsconfigPath: './tsconfig.build-lib.json',
    }), */
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  },
  build: {
    cssCodeSplit: true,
    lib: {
      entry: {
        index: fileURLToPath(new URL('./src/index.ts', import.meta.url)),
        'styles/styles': fileURLToPath(new URL('./src/assets/styles/index.css', import.meta.url)),

        'styles/border': fileURLToPath(new URL('./src/assets/styles/border.css', import.meta.url)),
        'styles/colors': fileURLToPath(new URL('./src/assets/styles/colors.css', import.meta.url)),
        'styles/fitx-brand': fileURLToPath(new URL('./src/assets/styles/fitx-brand.css', import.meta.url)),
        'styles/fitx-theme': fileURLToPath(new URL('./src/assets/styles/fitx-theme.css', import.meta.url)),
        'styles/fonts': fileURLToPath(new URL('./src/assets/styles/fonts.css', import.meta.url)),
        'styles/icons': fileURLToPath(new URL('./src/assets/styles/icons.css', import.meta.url)),
        'styles/sizes': fileURLToPath(new URL('./src/assets/styles/sizes.css', import.meta.url)),
        'styles/tokens/typo': fileURLToPath(new URL('./src/assets/styles/tokens/typo.css', import.meta.url)),
      },
      formats: ['es'],
      name: '@fitx/components',
      fileName: 'index',
    },
    rollupOptions: {
      external: ['vue'], // @TODO check to add vueuse
      output: {
        globals: {
          vue: 'Vue',
        },
        /* assetFileNames: (assetInfo) => {
          return `styles/${assetInfo.name}`;
        } */
      },
    },
    emptyOutDir: false, // to retain the types folder generated by tsc
  },
})
